model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  currentWorldId String? @db.ObjectId // the world the user is currently in
  // to be discussed: should we have a currentCampaignId?
  currentCampaignId String? @db.ObjectId // the campaign the user is currently in 

  worldIds String[] @db.ObjectId
  world    World[]  @relation(fields: [worldIds], references: [id], name: "world_users")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  SheetIds String[] @db.ObjectId
  Sheet    Sheet[]  @relation(fields: [SheetIds], references: [id], name: "sheet_users")

}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
